---
import Layout from '../layouts/Layout.astro';

const appId = import.meta.env.PUBLIC_INSTANT_APP_ID;

export const prerender = true;
---

<Layout title="Dashboard - Storefront">
  <div class="min-h-screen bg-gray-50">
    <!-- Navigation -->
    <nav class="bg-white shadow-sm border-b">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
          <div class="flex items-center">
            <h1 class="text-xl font-semibold text-gray-900">Dashboard</h1>
          </div>
          <div class="flex items-center space-x-4">
            <span id="user-email" class="text-gray-700"></span>
            <button
              id="sign-out-btn"
              class="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 transition-colors"
            >
              Sign Out
            </button>
          </div>
        </div>
      </div>
    </nav>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
      <!-- Auth Check -->
      <div id="auth-loading" class="text-center py-12">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto mb-4"></div>
        <p class="text-gray-600">Loading...</p>
      </div>

      <div id="auth-required" class="text-center py-12 hidden">
        <div class="text-gray-400 mb-4">
          <svg class="mx-auto h-24 w-24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
          </svg>
        </div>
        <h3 class="text-lg font-medium text-gray-900 mb-2">Authentication Required</h3>
        <p class="text-gray-600 mb-4">Please sign in to access your dashboard</p>
        <a href="/auth/login" class="bg-indigo-600 text-white px-6 py-3 rounded-md hover:bg-indigo-700 transition-colors">
          Sign In
        </a>
      </div>

      <!-- Dashboard Content -->
      <div id="dashboard-content" class="hidden">
        <!-- Welcome Section -->
        <div class="bg-white overflow-hidden shadow rounded-lg mb-6">
          <div class="px-4 py-5 sm:p-6">
            <h2 class="text-lg font-medium text-gray-900 mb-2">Welcome back!</h2>
            <p class="text-gray-600">Manage your stores and track your performance</p>
          </div>
        </div>

        <!-- Quick Actions -->
        <div class="bg-white overflow-hidden shadow rounded-lg mb-6">
          <div class="px-4 py-5 sm:p-6">
            <h3 class="text-lg font-medium text-gray-900 mb-4">Quick Actions</h3>
            <div class="flex flex-wrap gap-4">
              <button
                id="create-store-btn"
                class="bg-indigo-600 text-white px-6 py-3 rounded-md hover:bg-indigo-700 transition-colors"
              >
                Create New Store
              </button>
              <a
                href="/"
                class="bg-gray-600 text-white px-6 py-3 rounded-md hover:bg-gray-700 transition-colors"
              >
                View All Stores
              </a>
            </div>
          </div>
        </div>

        <!-- My Stores -->
        <div class="bg-white overflow-hidden shadow rounded-lg">
          <div class="px-4 py-5 sm:p-6">
            <h3 class="text-lg font-medium text-gray-900 mb-4">My Stores</h3>
            
            <div id="stores-loading" class="text-center py-8">
              <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600 mx-auto mb-2"></div>
              <p class="text-gray-600">Loading your stores...</p>
            </div>

            <div id="stores-empty" class="text-center py-8 hidden">
              <div class="text-gray-400 mb-4">
                <svg class="mx-auto h-16 w-16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 9a2 2 0 012-2m0 0V5a2 2 0 012 2v2M7 7h10" />
                </svg>
              </div>
              <h4 class="text-lg font-medium text-gray-900 mb-2">No stores yet</h4>
              <p class="text-gray-600 mb-4">Create your first store to get started</p>
              <button
                id="create-first-store-btn"
                class="bg-indigo-600 text-white px-6 py-3 rounded-md hover:bg-indigo-700 transition-colors"
              >
                Create Your First Store
              </button>
            </div>

            <div id="stores-list" class="hidden">
              <!-- Stores will be populated here -->
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Create Store Modal -->
  <div id="create-store-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
      <div class="mt-3">
        <h3 class="text-lg font-medium text-gray-900 mb-4">Create New Store</h3>
        <form id="create-store-form">
          <div class="mb-4">
            <label for="store-name" class="block text-sm font-medium text-gray-700 mb-2">Store Name</label>
            <input
              type="text"
              id="store-name"
              name="name"
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
              placeholder="Enter store name"
            />
          </div>
          <div class="mb-4">
            <label for="custom-domain" class="block text-sm font-medium text-gray-700 mb-2">Custom Domain (Optional)</label>
            <input
              type="text"
              id="custom-domain"
              name="customDomain"
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
              placeholder="example.com"
            />
          </div>
          <div class="flex justify-end space-x-3">
            <button
              type="button"
              id="cancel-create-btn"
              class="px-4 py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50 transition-colors"
            >
              Cancel
            </button>
            <button
              type="submit"
              class="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors"
            >
              Create Store
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</Layout>

<script type="module" is:inline>
  import { init, i, id } from '@instantdb/core';

  // Initialize InstantDB client-side
  const schema = i.schema({
    entities: {
      storefronts: i.entity({
        name: i.string(),
        customDomain: i.string().optional(),
        homePageId: i.string().optional(),
        createdAt: i.date(),
      }),
      blocks: i.entity({
        type: i.string(),
        pageId: i.string(),
        order: i.number(),
        content: i.json().optional(),
        style: i.json().optional(),
        createdAt: i.date(),
      }),
      products: i.entity({
        name: i.string(),
        description: i.string().optional(),
        price: i.number(),
        storeId: i.string(),
        imageUrl: i.string().optional(),
        createdAt: i.date(),
      }),
      orders: i.entity({
        name: i.string(),
        email: i.string(),
        cart: i.json(),
        storeId: i.string(),
        createdAt: i.date(),
      }),
    },
  });

  const db = init({
    appId: '{appId}',
    schema
  });

  let currentUser = null;
  let authUnsubscribe = null;
  let storesUnsubscribe = null;

  // DOM elements
  const authLoadingEl = document.getElementById('auth-loading');
  const authRequiredEl = document.getElementById('auth-required');
  const dashboardContentEl = document.getElementById('dashboard-content');
  const userEmailEl = document.getElementById('user-email');
  const signOutBtn = document.getElementById('sign-out-btn');
  const createStoreBtn = document.getElementById('create-store-btn');
  const createFirstStoreBtn = document.getElementById('create-first-store-btn');
  const createStoreModal = document.getElementById('create-store-modal');
  const createStoreForm = document.getElementById('create-store-form');
  const cancelCreateBtn = document.getElementById('cancel-create-btn');
  const storesLoadingEl = document.getElementById('stores-loading');
  const storesEmptyEl = document.getElementById('stores-empty');
  const storesListEl = document.getElementById('stores-list');

  // Show/hide elements
  function showElement(el) {
    el.classList.remove('hidden');
  }

  function hideElement(el) {
    el.classList.add('hidden');
  }

  // Update UI based on auth state
  function updateAuthUI() {
    if (currentUser) {
      hideElement(authLoadingEl);
      hideElement(authRequiredEl);
      showElement(dashboardContentEl);
      userEmailEl.textContent = currentUser.email;
      loadUserStores();
    } else {
      hideElement(authLoadingEl);
      hideElement(dashboardContentEl);
      showElement(authRequiredEl);
    }
  }

  // Load user's stores
  function loadUserStores() {
    if (storesUnsubscribe) {
      storesUnsubscribe();
    }

    storesUnsubscribe = db.subscribeQuery({ storefronts: {} }, (resp) => {
      hideElement(storesLoadingEl);

      if (resp.error) {
        console.error('Error loading stores:', resp.error);
        return;
      }

      const stores = resp.data?.storefronts || [];

      if (stores.length === 0) {
        showElement(storesEmptyEl);
        hideElement(storesListEl);
        return;
      }

      hideElement(storesEmptyEl);
      showElement(storesListEl);

      // Render stores
      storesListEl.innerHTML = stores.map(store => `
        <div class="border border-gray-200 rounded-lg p-4 mb-4">
          <div class="flex justify-between items-start">
            <div>
              <h4 class="text-lg font-medium text-gray-900">${store.name}</h4>
              ${store.customDomain ? `<p class="text-sm text-gray-600">Domain: ${store.customDomain}</p>` : ''}
              <p class="text-sm text-gray-500">Created: ${new Date(store.createdAt).toLocaleDateString()}</p>
            </div>
            <div class="flex space-x-2">
              <a
                href="/store/${store.id}/"
                class="bg-indigo-600 text-white px-3 py-1 rounded text-sm hover:bg-indigo-700 transition-colors"
              >
                View Store
              </a>
              <button
                onclick="deleteStore('${store.id}')"
                class="bg-red-600 text-white px-3 py-1 rounded text-sm hover:bg-red-700 transition-colors"
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      `).join('');
    });
  }

  // Create new store
  async function createStore(name, customDomain) {
    try {
      const storeId = id();
      await db.transact([
        db.tx.storefronts[storeId].update({
          name,
          customDomain: customDomain || undefined,
          createdAt: new Date()
        })
      ]);
      return { success: true };
    } catch (error) {
      console.error('Error creating store:', error);
      return { success: false, error: error.message };
    }
  }

  // Delete store
  window.deleteStore = async function(storeId) {
    if (!confirm('Are you sure you want to delete this store? This action cannot be undone.')) {
      return;
    }

    try {
      await db.transact([db.tx.storefronts[storeId].delete()]);
    } catch (error) {
      console.error('Error deleting store:', error);
      alert('Failed to delete store. Please try again.');
    }
  };

  // Sign out
  async function signOut() {
    try {
      await db.auth.signOut();
      window.location.href = '/';
    } catch (error) {
      console.error('Error signing out:', error);
    }
  }

  // Show/hide modal
  function showModal() {
    showElement(createStoreModal);
  }

  function hideModal() {
    hideElement(createStoreModal);
    createStoreForm.reset();
  }

  // Event listeners
  document.addEventListener('DOMContentLoaded', () => {
    // Subscribe to auth changes
    authUnsubscribe = db.auth.onChange((auth) => {
      currentUser = auth.user;
      updateAuthUI();
    });

    // Sign out button
    signOutBtn.addEventListener('click', signOut);

    // Create store buttons
    createStoreBtn.addEventListener('click', showModal);
    createFirstStoreBtn.addEventListener('click', showModal);

    // Modal controls
    cancelCreateBtn.addEventListener('click', hideModal);
    createStoreModal.addEventListener('click', (e) => {
      if (e.target === createStoreModal) {
        hideModal();
      }
    });

    // Create store form
    createStoreForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const name = formData.get('name');
      const customDomain = formData.get('customDomain');

      const result = await createStore(name, customDomain);
      if (result.success) {
        hideModal();
      } else {
        alert('Failed to create store: ' + result.error);
      }
    });
  });

  // Clean up on page unload
  window.addEventListener('beforeunload', () => {
    if (authUnsubscribe) authUnsubscribe();
    if (storesUnsubscribe) storesUnsubscribe();
  });
</script>
