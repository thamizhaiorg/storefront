---
import Layout from '../../../layouts/Layout.astro';
const { storeId } = Astro.params;

// Set to false to enable server-side rendering for dynamic routes
export const prerender = false;
---

<Layout title="Shopping Cart">
  <div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900">Shopping Cart</h1>
        <p class="mt-2 text-gray-600">Review your items before checkout</p>
      </div>

      <!-- Loading State -->
      <div id="loading" class="text-center py-12">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto"></div>
        <p class="mt-4 text-gray-600">Loading your cart...</p>
      </div>

      <!-- Empty Cart State -->
      <div id="empty-cart" class="hidden text-center py-12">
        <div class="text-gray-400 mb-4">
          <svg class="mx-auto h-24 w-24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-1.5 6M7 13l-1.5-6M20 13v6a2 2 0 01-2 2H6a2 2 0 01-2-2v-6m16 0V9a2 2 0 00-2-2H6a2 2 0 00-2-2v6z" />
          </svg>
        </div>
        <h3 class="text-lg font-medium text-gray-900 mb-2">Your cart is empty</h3>
        <p class="text-gray-600 mb-6">Start shopping to add items to your cart</p>
        <a
          href={`/store/${storeId}/products`}
          class="inline-block bg-indigo-600 text-white px-6 py-3 rounded-md font-medium hover:bg-indigo-700 transition-colors"
        >
          Continue Shopping
        </a>
      </div>

      <!-- Cart Content -->
      <div id="cart-content" class="hidden">
        <div class="bg-white shadow-sm rounded-lg overflow-hidden">
          <!-- Cart Items -->
          <div id="cart-items" class="divide-y divide-gray-200">
            <!-- Items will be populated here -->
          </div>

          <!-- Cart Summary -->
          <div class="bg-gray-50 px-6 py-4">
            <div class="flex justify-between items-center mb-4">
              <span class="text-lg font-medium text-gray-900">Subtotal</span>
              <span id="subtotal" class="text-lg font-bold text-gray-900">$0.00</span>
            </div>
            <div class="flex justify-between items-center mb-4 text-sm text-gray-600">
              <span>Shipping</span>
              <span>Calculated at checkout</span>
            </div>
            <div class="border-t border-gray-200 pt-4 flex justify-between items-center">
              <span class="text-xl font-bold text-gray-900">Total</span>
              <span id="total" class="text-xl font-bold text-gray-900">$0.00</span>
            </div>
          </div>

          <!-- Action Buttons -->
          <div class="px-6 py-4 bg-white border-t border-gray-200">
            <div class="flex flex-col sm:flex-row gap-4">
              <a
                href={`/store/${storeId}/products`}
                class="flex-1 bg-gray-200 text-gray-800 px-6 py-3 rounded-md font-medium text-center hover:bg-gray-300 transition-colors"
              >
                Continue Shopping
              </a>
              <a
                href={`/store/${storeId}/checkout`}
                id="checkout-btn"
                class="flex-1 bg-indigo-600 text-white px-6 py-3 rounded-md font-medium text-center hover:bg-indigo-700 transition-colors"
              >
                Proceed to Checkout
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script type="module" is:inline>
  // Import InstantDB from CDN
  import { init, i } from 'https://cdn.skypack.dev/@instantdb/core';

  const storeId = window.location.pathname.split('/')[2];

  // Initialize InstantDB client-side
  const schema = i.schema({
    entities: {
      storefronts: i.entity({
        name: i.string(),
        description: i.string().optional(),
        customDomain: i.string().optional(),
        homePageId: i.string().optional(),
        logoUrl: i.string().optional(),
        themeColor: i.string().optional(),
        createdAt: i.date(),
      }),
      products: i.entity({
        name: i.string(),
        description: i.string().optional(),
        price: i.number(),
        storeId: i.string(),
        imageUrl: i.string().optional(),
        category: i.string().optional(),
        inStock: i.boolean().optional(),
        createdAt: i.date(),
      }),
      cartItems: i.entity({
        productId: i.string(),
        quantity: i.number(),
        userId: i.string().optional(),
        sessionId: i.string().optional(),
        storeId: i.string(),
        createdAt: i.date(),
      }),
    },
    links: {
      storeProducts: {
        forward: { on: 'storefronts', has: 'many', label: 'products' },
        reverse: { on: 'products', has: 'one', label: 'store' },
      },
      storeCartItems: {
        forward: { on: 'storefronts', has: 'many', label: 'cartItems' },
        reverse: { on: 'cartItems', has: 'one', label: 'store' },
      },
    },
  });

  const db = init({
    appId: window.INSTANT_APP_ID,
    schema
  });

  // Cart state
  let currentUser = null;
  let sessionId = localStorage.getItem('sessionId') || null;
  let cartItems = [];
  let products = {};

  // DOM elements
  const loadingEl = document.getElementById('loading');
  const emptyCartEl = document.getElementById('empty-cart');
  const cartContentEl = document.getElementById('cart-content');
  const cartItemsEl = document.getElementById('cart-items');
  const subtotalEl = document.getElementById('subtotal');
  const totalEl = document.getElementById('total');

  // Fetch product details
  async function fetchProduct(productId) {
    if (products[productId]) {
      return products[productId];
    }

    try {
      const response = await fetch(`/api/product?productId=${productId}`);
      if (response.ok) {
        const product = await response.json();
        products[productId] = product;
        return product;
      }
    } catch (error) {
      console.error('Error fetching product:', error);
    }
    return null;
  }

  // Update quantity
  function updateQuantity(productId, newQuantity) {
    if (newQuantity <= 0) {
      delete cart[productId];
    } else {
      cart[productId] = newQuantity;
    }
    localStorage.setItem('cart', JSON.stringify(cart));
    renderCart();
  }

  // Remove item
  function removeItem(productId) {
    delete cart[productId];
    localStorage.setItem('cart', JSON.stringify(cart));
    renderCart();
  }

  // Create cart item HTML
  function createCartItemHTML(product, quantity) {
    const itemTotal = (product.price * quantity).toFixed(2);

    return `
      <div class="p-6 flex items-center space-x-4">
        <div class="flex-shrink-0">
          <img
            src="${product.imageUrl || '/placeholder-product.jpg'}"
            alt="${product.name}"
            class="w-20 h-20 object-cover rounded-md"
          />
        </div>
        <div class="flex-1 min-w-0">
          <h3 class="text-lg font-medium text-gray-900 truncate">${product.name}</h3>
          <p class="text-sm text-gray-600 mt-1">${product.description || ''}</p>
          <p class="text-lg font-bold text-gray-900 mt-2">$${product.price}</p>
        </div>
        <div class="flex items-center space-x-3">
          <button
            onclick="updateQuantity('${product.id}', ${quantity - 1})"
            class="w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center hover:bg-gray-300 transition-colors"
            ${quantity <= 1 ? 'disabled' : ''}
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path>
            </svg>
          </button>
          <span class="text-lg font-medium w-8 text-center">${quantity}</span>
          <button
            onclick="updateQuantity('${product.id}', ${quantity + 1})"
            class="w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center hover:bg-gray-300 transition-colors"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
          </button>
        </div>
        <div class="text-right">
          <p class="text-lg font-bold text-gray-900">$${itemTotal}</p>
          <button
            onclick="removeItem('${product.id}')"
            class="text-red-600 hover:text-red-800 text-sm mt-1 transition-colors"
          >
            Remove
          </button>
        </div>
      </div>
    `;
  }

  // Render cart
  async function renderCart() {
    // Load cart from localStorage
    cart = JSON.parse(localStorage.getItem('cart') || '{}');

    // Check if cart is empty
    if (Object.keys(cart).length === 0) {
      loadingEl.classList.add('hidden');
      emptyCartEl.classList.remove('hidden');
      cartContentEl.classList.add('hidden');
      return;
    }

    // Show cart content
    loadingEl.classList.add('hidden');
    emptyCartEl.classList.add('hidden');
    cartContentEl.classList.remove('hidden');

    // Render cart items
    let cartHTML = '';
    let subtotal = 0;

    for (const [productId, quantity] of Object.entries(cart)) {
      const product = await fetchProduct(productId);
      if (product) {
        cartHTML += createCartItemHTML(product, quantity);
        subtotal += product.price * quantity;
      }
    }

    cartItemsEl.innerHTML = cartHTML;
    subtotalEl.textContent = `$${subtotal.toFixed(2)}`;
    totalEl.textContent = `$${subtotal.toFixed(2)}`;
  }

  // Make functions global for onclick handlers
  window.updateQuantity = updateQuantity;
  window.removeItem = removeItem;

  // Initialize cart
  renderCart();
</script>
