---
import Layout from '../../../../layouts/Layout.astro';

const { storeId, productId } = Astro.params;
const appId = import.meta.env.PUBLIC_INSTANT_APP_ID;

// Set to false to enable server-side rendering for dynamic routes
export const prerender = false;
---
<Layout title="Product - Storefront">
  <!-- Loading state and content will be populated by JavaScript -->

  <!-- Loading State -->
  <div id="product-loading" class="min-h-screen bg-surface-50 py-10">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center py-12">
        <div class="animate-spin rounded-lg h-12 w-12 border-2 border-surface-200 border-t-brand-500 mx-auto mb-4"></div>
        <p class="text-surface-600">Loading product...</p>
      </div>
    </div>
  </div>

  <!-- Product Content (populated by JavaScript) -->
  <div id="product-content" class="min-h-screen bg-surface-50 py-10 hidden">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Breadcrumbs -->
      <nav id="breadcrumbs" class="mb-8">
        <ol class="flex flex-wrap items-center space-x-2 text-sm">
          <!-- Populated by JavaScript -->
        </ol>
      </nav>

      <!-- Product Details -->
      <div class="bg-white border border-surface-200 rounded-lg overflow-hidden">
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 p-8">
          <!-- Product Image -->
          <div class="aspect-w-1 aspect-h-1">
            <img
              id="product-image"
              src="/placeholder-product.jpg"
              alt="Product"
              class="w-full h-96 object-cover object-center rounded-lg"
            />
          </div>

          <!-- Product Info -->
          <div class="space-y-8">
            <div>
              <h1 id="product-name" class="text-3xl font-display font-medium text-surface-900">Loading...</h1>
              <p id="product-price" class="text-2xl font-medium text-brand-600 mt-2">$0.00</p>
              <div id="product-category" class="mt-3 hidden">
                <span class="badge badge-brand"></span>
              </div>
            </div>

            <div id="product-description" class="hidden">
              <h3 class="text-lg font-medium text-surface-900 mb-2">Description</h3>
              <p class="text-surface-600"></p>
            </div>

            <!-- Add to Cart -->
            <div class="space-y-6 pt-4">
              <div class="flex items-center space-x-4">
                <label for="quantity" class="text-sm font-medium text-surface-700">Quantity:</label>
                <select id="quantity" class="input-field w-24">
                  <option value="1">1</option>
                  <option value="2">2</option>
                  <option value="3">3</option>
                  <option value="4">4</option>
                  <option value="5">5</option>
                </select>
              </div>

              <button id="add-to-cart" class="w-full btn-accent py-3 px-6 text-lg">
                Add to Cart
              </button>

              <div class="flex space-x-4">
                <a id="continue-shopping" href="#" class="flex-1 btn-outline py-2 px-4 text-center">
                  Continue Shopping
                </a>
                <a id="view-cart" href="#" class="flex-1 btn-primary py-2 px-4 text-center">
                  View Cart
                </a>
              </div>
            </div>

            <!-- Store Info -->
            <div class="border-t border-surface-200 pt-6">
              <h3 class="text-lg font-medium text-surface-900 mb-2">Sold by</h3>
              <a id="store-link" href="#" class="flex items-center space-x-3 text-brand-600 hover:text-brand-700">
                <div class="w-10 h-10 bg-brand-100 rounded-lg flex items-center justify-center">
                  <svg class="w-6 h-6 text-brand-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                  </svg>
                </div>
                <span id="store-name" class="font-medium">Loading...</span>
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Error State -->
  <div id="product-error" class="min-h-screen bg-surface-50 py-10 hidden">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center py-12">
        <div class="text-red-400 mb-4">
          <svg class="mx-auto h-24 w-24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </div>
        <h3 class="text-lg font-medium text-surface-900 mb-2">Product not found</h3>
        <p class="text-surface-600 mb-4">The product you're looking for doesn't exist.</p>
        <a href="/" class="btn-primary">Go Home</a>
      </div>
    </div>
  </div>
</Layout>

<script is:inline define:vars={{ storeId, productId, appId }}>
  // Set global variables
  window.STORE_ID = storeId;
  window.PRODUCT_ID = productId;
  window.INSTANT_APP_ID = appId;
</script>

<script type="module" is:inline>
  import { init, i } from 'https://cdn.skypack.dev/@instantdb/core';

  // Initialize InstantDB
  const schema = i.schema({
    entities: {
      storefronts: i.entity({
        name: i.string(),
        customDomain: i.string().optional(),
        homePageId: i.string().optional(),
        createdAt: i.date(),
      }),
      products: i.entity({
        name: i.string(),
        description: i.string().optional(),
        price: i.number(),
        storeId: i.string(),
        imageUrl: i.string().optional(),
        createdAt: i.date(),
      }),
    },
  });

  const db = init({
    appId: window.INSTANT_APP_ID,
    schema
  });

  const productId = window.PRODUCT_ID;
  const storeId = window.STORE_ID;

  // Load product data
  async function loadProduct() {
    try {
      const result = await db.queryOnce({
        products: {
          $: { where: { id: productId } }
        },
        storefronts: {
          $: { where: { id: storeId } }
        }
      });

      const product = result.data?.products?.[0];
      const store = result.data?.storefronts?.[0];

      if (!product || !store) {
        showError();
        return;
      }

      // Update page content
      document.getElementById('product-name').textContent = product.name;
      document.getElementById('product-price').textContent = `$${product.price}`;
      document.getElementById('product-image').src = product.imageUrl || '/placeholder-product.jpg';
      document.getElementById('product-image').alt = product.name;
      document.getElementById('store-name').textContent = store.name;
      document.getElementById('store-link').href = `/store/${storeId}`;
      document.getElementById('continue-shopping').href = `/store/${storeId}/products`;
      document.getElementById('view-cart').href = `/store/${storeId}/cart`;

      if (product.description) {
        document.getElementById('product-description').querySelector('p').textContent = product.description;
        document.getElementById('product-description').classList.remove('hidden');
      }

      // Update page title
      document.title = `${product.name} - ${store.name}`;

      // Show content, hide loading
      document.getElementById('product-loading').classList.add('hidden');
      document.getElementById('product-content').classList.remove('hidden');

    } catch (error) {
      console.error('Error loading product:', error);
      showError();
    }
  }

  function showError() {
    document.getElementById('product-loading').classList.add('hidden');
    document.getElementById('product-error').classList.remove('hidden');
  }

  // Add to cart functionality
  document.getElementById('add-to-cart').addEventListener('click', () => {
    const quantity = parseInt(document.getElementById('quantity').value);
    let cart = JSON.parse(localStorage.getItem('cart') || '{}');
    cart[productId] = (cart[productId] || 0) + quantity;
    localStorage.setItem('cart', JSON.stringify(cart));

    // Dispatch custom event for cart updates
    window.dispatchEvent(new CustomEvent('cartUpdated'));

    // Show success message
    const button = document.getElementById('add-to-cart');
    const originalText = button.textContent;
    button.textContent = 'Added to Cart!';
    button.classList.add('bg-green-600');

    setTimeout(() => {
      button.textContent = originalText;
      button.classList.remove('bg-green-600');
    }, 2000);
  });

  // Load product when page loads
  loadProduct();
</script>
