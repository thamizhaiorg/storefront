---
import Layout from '../layouts/Layout.astro';

const appId = import.meta.env.PUBLIC_INSTANT_APP_ID;

export const prerender = true;
---

<Layout title="Test Auth - Storefront">
  <div class="min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md mx-auto">
      <div class="bg-white shadow rounded-lg p-6">
        <h1 class="text-2xl font-bold text-gray-900 mb-6">Test Authentication</h1>
        
        <!-- App ID Display -->
        <div class="mb-6 p-4 bg-gray-100 rounded">
          <h3 class="font-medium text-gray-900">App ID:</h3>
          <p class="text-sm text-gray-600 font-mono">{appId}</p>
        </div>

        <!-- Auth Status -->
        <div id="auth-status" class="mb-6 p-4 rounded">
          <h3 class="font-medium text-gray-900">Auth Status:</h3>
          <p id="auth-status-text" class="text-sm">Loading...</p>
        </div>

        <!-- Magic Code Test -->
        <div class="space-y-4">
          <div>
            <label for="test-email" class="block text-sm font-medium text-gray-700">Email:</label>
            <input
              type="email"
              id="test-email"
              class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
              placeholder="test@example.com"
            />
          </div>
          
          <button
            id="send-code-btn"
            class="w-full bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500"
          >
            Send Magic Code
          </button>

          <div id="code-section" class="hidden space-y-4">
            <div>
              <label for="test-code" class="block text-sm font-medium text-gray-700">Magic Code:</label>
              <input
                type="text"
                id="test-code"
                class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                placeholder="123456"
              />
            </div>
            
            <button
              id="verify-code-btn"
              class="w-full bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500"
            >
              Verify Code
            </button>
          </div>

          <button
            id="sign-out-btn"
            class="w-full bg-red-600 text-white py-2 px-4 rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 hidden"
          >
            Sign Out
          </button>
        </div>

        <!-- Messages -->
        <div id="messages" class="mt-6"></div>

        <!-- Debug Info -->
        <div id="debug-info" class="mt-6 p-4 bg-gray-100 rounded text-xs">
          <h4 class="font-medium text-gray-900 mb-2">Debug Info:</h4>
          <pre id="debug-text" class="text-gray-600 whitespace-pre-wrap"></pre>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script is:inline define:vars={{ appId }}>
  // Set the app ID as a global variable
  window.INSTANT_APP_ID = appId;
</script>

<script type="module" is:inline>
  // Import InstantDB from CDN
  import { init, i } from 'https://cdn.skypack.dev/@instantdb/core';

  // Initialize InstantDB
  const schema = i.schema({
    entities: {
      storefronts: i.entity({
        name: i.string(),
        customDomain: i.string().optional(),
        homePageId: i.string().optional(),
        createdAt: i.date(),
      }),
    },
  });

  const db = init({
    appId: window.INSTANT_APP_ID,
    schema
  });

  // DOM elements
  const authStatusEl = document.getElementById('auth-status');
  const authStatusTextEl = document.getElementById('auth-status-text');
  const testEmailEl = document.getElementById('test-email');
  const sendCodeBtn = document.getElementById('send-code-btn');
  const codeSectionEl = document.getElementById('code-section');
  const testCodeEl = document.getElementById('test-code');
  const verifyCodeBtn = document.getElementById('verify-code-btn');
  const signOutBtn = document.getElementById('sign-out-btn');
  const messagesEl = document.getElementById('messages');
  const debugTextEl = document.getElementById('debug-text');

  let currentUser = null;
  let sentEmail = '';

  // Utility functions
  function showMessage(message, type = 'info') {
    const colors = {
      success: 'text-green-600 bg-green-50 border-green-200',
      error: 'text-red-600 bg-red-50 border-red-200',
      info: 'text-blue-600 bg-blue-50 border-blue-200'
    };

    messagesEl.innerHTML = `
      <div class="p-3 rounded border ${colors[type]}">
        ${message}
      </div>
    `;
  }

  function updateDebug(info) {
    debugTextEl.textContent = JSON.stringify(info, null, 2);
  }

  function updateAuthStatus() {
    if (currentUser) {
      authStatusEl.className = 'mb-6 p-4 rounded bg-green-50 border border-green-200';
      authStatusTextEl.innerHTML = `
        <span class="text-green-600">Authenticated</span><br>
        <span class="text-sm text-gray-600">Email: ${currentUser.email}</span><br>
        <span class="text-sm text-gray-600">ID: ${currentUser.id}</span>
      `;
      signOutBtn.classList.remove('hidden');
    } else {
      authStatusEl.className = 'mb-6 p-4 rounded bg-gray-50 border border-gray-200';
      authStatusTextEl.innerHTML = '<span class="text-gray-600">Not authenticated</span>';
      signOutBtn.classList.add('hidden');
    }
  }

  // Auth event handlers
  sendCodeBtn.addEventListener('click', async () => {
    const email = testEmailEl.value.trim();
    if (!email) {
      showMessage('Please enter an email address', 'error');
      return;
    }

    sendCodeBtn.disabled = true;
    sendCodeBtn.textContent = 'Sending...';

    try {
      updateDebug({ action: 'sendMagicCode', email, timestamp: new Date().toISOString() });

      await db.auth.sendMagicCode({ email });

      sentEmail = email;
      codeSectionEl.classList.remove('hidden');
      showMessage(`Magic code sent to ${email}`, 'success');
      testCodeEl.focus();

      updateDebug({
        action: 'sendMagicCode',
        email,
        status: 'success',
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.error('Error sending magic code:', error);
      showMessage(`Error: ${error.body?.message || error.message}`, 'error');

      updateDebug({
        action: 'sendMagicCode',
        email,
        error: error.body || error.message,
        timestamp: new Date().toISOString()
      });
    } finally {
      sendCodeBtn.disabled = false;
      sendCodeBtn.textContent = 'Send Magic Code';
    }
  });

  verifyCodeBtn.addEventListener('click', async () => {
    const code = testCodeEl.value.trim();
    if (!code) {
      showMessage('Please enter the magic code', 'error');
      return;
    }

    verifyCodeBtn.disabled = true;
    verifyCodeBtn.textContent = 'Verifying...';

    try {
      updateDebug({
        action: 'signInWithMagicCode',
        email: sentEmail,
        code,
        timestamp: new Date().toISOString()
      });

      const result = await db.auth.signInWithMagicCode({ email: sentEmail, code });

      showMessage('Successfully signed in!', 'success');
      codeSectionEl.classList.add('hidden');
      testCodeEl.value = '';

      updateDebug({
        action: 'signInWithMagicCode',
        email: sentEmail,
        code,
        result,
        status: 'success',
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.error('Error verifying code:', error);
      showMessage(`Error: ${error.body?.message || error.message}`, 'error');
      testCodeEl.value = '';
      testCodeEl.focus();

      updateDebug({
        action: 'signInWithMagicCode',
        email: sentEmail,
        code,
        error: error.body || error.message,
        timestamp: new Date().toISOString()
      });
    } finally {
      verifyCodeBtn.disabled = false;
      verifyCodeBtn.textContent = 'Verify Code';
    }
  });

  signOutBtn.addEventListener('click', async () => {
    try {
      await db.auth.signOut();
      showMessage('Signed out successfully', 'success');
      codeSectionEl.classList.add('hidden');
      testEmailEl.value = '';
      testCodeEl.value = '';
      sentEmail = '';

      updateDebug({
        action: 'signOut',
        status: 'success',
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.error('Error signing out:', error);
      showMessage(`Error: ${error.message}`, 'error');

      updateDebug({
        action: 'signOut',
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  });

  // Initialize
  document.addEventListener('DOMContentLoaded', () => {
    // Subscribe to auth changes
    db.auth.onChange((auth) => {
      currentUser = auth.user;
      updateAuthStatus();

      updateDebug({
        action: 'authChange',
        user: currentUser,
        timestamp: new Date().toISOString()
      });
    });

    updateDebug({
      action: 'init',
      appId: window.INSTANT_APP_ID,
      timestamp: new Date().toISOString()
    });
  });
</script>
