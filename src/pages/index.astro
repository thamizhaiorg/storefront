---
import Layout from '../layouts/Layout.astro';

const appId = import.meta.env.PUBLIC_INSTANT_APP_ID;

export const prerender = true;
---

<Layout title="Modern Storefront Platform" description="Discover amazing stores and products on our modern, minimal e-commerce platform">
  <!-- Modern Stores Section -->
  <section id="stores" class="py-12 bg-white">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12">
        <h1 class="text-3xl md:text-4xl font-display font-medium text-surface-900 mb-4">Browse Stores</h1>
        <p class="text-lg text-surface-600">Discover amazing stores and their unique products</p>
      </div>

      <div id="stores-container">
        <!-- Loading state -->
        <div id="stores-loading" class="text-center py-12">
          <div class="animate-spin rounded-lg h-12 w-12 border-2 border-surface-200 border-t-brand-500 mx-auto mb-4"></div>
          <p class="text-surface-600">Loading stores...</p>
        </div>

        <!-- Stores will be loaded here -->
        <div id="stores-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 hidden"></div>

        <!-- Empty state -->
        <div id="stores-empty" class="text-center py-12 hidden">
          <div class="text-surface-400 mb-4">
            <svg class="mx-auto h-24 w-24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 9a2 2 0 012-2m0 0V5a2 2 0 012 2v2M7 7h10" />
            </svg>
          </div>
          <h3 class="text-lg font-medium text-surface-900 mb-2">No stores available yet</h3>
          <p class="text-surface-600">Check back soon for amazing stores and products!</p>
        </div>

        <!-- Error state -->
        <div id="stores-error" class="text-center py-12 hidden">
          <div class="text-red-400 mb-4">
            <svg class="mx-auto h-24 w-24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          <h3 class="text-lg font-medium text-surface-900 mb-2">Unable to load stores</h3>
          <p class="text-surface-600">Please try refreshing the page</p>
        </div>
      </div>
    </div>
  </section>
</Layout>

<script is:inline define:vars={{ appId }}>
  // Set the app ID as a global variable
  window.INSTANT_APP_ID = appId;
</script>

<script type="module" is:inline>
  // Import InstantDB from CDN
  import { init, i } from 'https://cdn.skypack.dev/@instantdb/core';

  // Initialize InstantDB client-side
  const schema = i.schema({
    entities: {
      storefronts: i.entity({
        name: i.string(),
        description: i.string().optional(),
        customDomain: i.string().optional(),
        homePageId: i.string().optional(),
        logoUrl: i.string().optional(),
        themeColor: i.string().optional(),
        createdAt: i.date(),
      }),
      pages: i.entity({
        title: i.string(),
        slug: i.string(),
        storeId: i.string(),
        isHomePage: i.boolean().optional(),
        createdAt: i.date(),
      }),
      blocks: i.entity({
        type: i.string(), // 'hero', 'text', 'product-grid', 'image', etc.
        pageId: i.string(),
        order: i.number(),
        content: i.json().optional(),
        style: i.json().optional(),
        createdAt: i.date(),
      }),
      products: i.entity({
        name: i.string(),
        description: i.string().optional(),
        price: i.number(),
        storeId: i.string(),
        imageUrl: i.string().optional(),
        category: i.string().optional(),
        inStock: i.boolean().optional(),
        createdAt: i.date(),
      }),
      cartItems: i.entity({
        productId: i.string(),
        quantity: i.number(),
        userId: i.string().optional(),
        sessionId: i.string().optional(),
        storeId: i.string(),
        createdAt: i.date(),
      }),
      orders: i.entity({
        customerName: i.string(),
        customerEmail: i.string(),
        items: i.json(), // Array of {productId, quantity, price}
        total: i.number(),
        status: i.string(), // 'pending', 'confirmed', 'shipped', 'delivered'
        storeId: i.string(),
        createdAt: i.date(),
      }),
    },
    links: {
      storePages: {
        forward: { on: 'storefronts', has: 'many', label: 'pages' },
        reverse: { on: 'pages', has: 'one', label: 'store' },
      },
      storeProducts: {
        forward: { on: 'storefronts', has: 'many', label: 'products' },
        reverse: { on: 'products', has: 'one', label: 'store' },
      },
      pageBlocks: {
        forward: { on: 'pages', has: 'many', label: 'blocks' },
        reverse: { on: 'blocks', has: 'one', label: 'page' },
      },
      storeOrders: {
        forward: { on: 'storefronts', has: 'many', label: 'orders' },
        reverse: { on: 'orders', has: 'one', label: 'store' },
      },
      storeCartItems: {
        forward: { on: 'storefronts', has: 'many', label: 'cartItems' },
        reverse: { on: 'cartItems', has: 'one', label: 'store' },
      },
    },
  });

  const db = init({
    appId: window.INSTANT_APP_ID,
    schema
  });

  // Store the DB instance globally for other scripts to use
  window.INSTANT_DB_INSTANCE = db;

  // Auth state management
  let currentUser = null;

  // Update auth buttons based on user state
  function updateAuthButtons() {
    console.log('Updating auth buttons, current user:', currentUser);
    // Auth buttons are now handled by the layout header
  }



  // Load stores and auth on page load
  document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM loaded, initializing...');

    const loadingEl = document.getElementById('stores-loading');
    const gridEl = document.getElementById('stores-grid');
    const emptyEl = document.getElementById('stores-empty');
    const errorEl = document.getElementById('stores-error');

    // Check current auth state
    console.log('Checking current auth state...');
    async function checkAuthState() {
      try {
        const auth = await db.getAuth();
        console.log('Auth state retrieved:', auth);
        currentUser = auth;
        updateAuthButtons();
      } catch (error) {
        console.error('Error getting auth state:', error);
      }
    }

    // Initial auth check
    checkAuthState();

    // Periodic auth check (every 30 seconds)
    setInterval(checkAuthState, 30000);

    // Load stores data
    console.log('Setting up stores loading...');
    try {
      // Use simple InstaQL query - limit and order only work on top-level
      console.log('Setting up stores subscription...');
      const storesQuery = {
        storefronts: {
          $: {
            order: { serverCreatedAt: 'desc' },
            limit: 12 // Limit to 12 featured stores
          },
          products: {} // Get all products for each store (no nested limit allowed)
        }
      };

      db.subscribeQuery(storesQuery, (resp) => {
        console.log('Stores subscription response:', resp);

        // Hide loading state
        loadingEl.classList.add('hidden');

        if (resp.error) {
          console.error('Error in stores subscription:', resp.error);
          errorEl.classList.remove('hidden');
          return;
        }

        const stores = resp.data?.storefronts || [];
        console.log('Found stores:', stores);

        if (stores.length === 0) {
          console.log('No stores found, showing empty state');
          emptyEl.classList.remove('hidden');
          return;
        }

        // Hide empty and error states
        emptyEl.classList.add('hidden');
        errorEl.classList.add('hidden');

        // Render stores
        console.log('Rendering stores...');
        gridEl.innerHTML = stores.map(store => {
          const productCount = store.products?.length || 0;
          const hasProducts = productCount > 0;

          return `
            <div class="bg-white rounded-lg border border-surface-200 overflow-hidden hover:border-brand-300 transition-colors duration-300">
              <div class="h-48 bg-gradient-to-r from-brand-500 to-accent-500 relative">
                ${store.logoUrl ? `<img src="${store.logoUrl}" alt="${store.name}" class="absolute inset-0 w-full h-full object-cover">` : ''}
              </div>
              <div class="p-6">
                <h3 class="text-xl font-medium text-surface-900 mb-2">${store.name}</h3>
                <p class="text-surface-600 mb-4">${store.description || 'Discover amazing products and deals'}</p>
                <div class="flex items-center justify-between">
                  <span class="text-sm text-surface-500">${hasProducts ? `${productCount} products` : 'New store'}</span>
                  <a
                    href="/store/${store.id}/"
                    class="btn-primary px-6 py-2 font-medium"
                  >
                    Visit Store
                  </a>
                </div>
              </div>
            </div>
          `;
        }).join('');

        gridEl.classList.remove('hidden');
        console.log('Stores rendered successfully');
      });
    } catch (error) {
      console.error('Error initializing stores loading:', error);
      loadingEl.classList.add('hidden');
      errorEl.classList.remove('hidden');
    }
  });

  // Clean up on page unload
  window.addEventListener('beforeunload', () => {
    // No cleanup needed for getAuth approach
  });
</script>
